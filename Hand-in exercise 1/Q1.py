import numpy as np
import matplotlib.pyplot as plt

def factorial(k):
   h = 1
   while k>1:
      h = h*k
      k -= 1
   return h

def Poisson(labda, k):
   return (labda**k)*np.exp(-labda)/(factorial(k))

print(Poisson(1,0))
print(Poisson(5,10))
print(Poisson(3,20))
print(Poisson(2.6,40))

def LCG(x):
   a = 3202034522624059733
   c = 4354685564936845319
   m = 2**64
   return (a*x+c)%m

def XOR_shift(x):
   a1, a2, a3 = np.uint64(21), np.uint64(35), np.uint64(4)
   x = np.uint64(x)
   x = x ^ (x >> a1)
   x = x ^ (x << a2)
   x = x ^ (x >> a3)
   return x

def random_list(seed, length, method = XOR_shift, norm = True):
   randomnumbers = []
   state = seed

   for i in range(length):
      state = method(state)
      randomnumbers.append(state)

   if norm == True:
         randomnumbers = np.array(randomnumbers)/(2**64)

   return randomnumbers.tolist()

def RNG(seed, length, norm = True):
   randomnumbers = []
   state = seed
   
   for i in range(length):
      if i%2 == 0:
         state = XOR_shift(state)
      else:
         state = LCG(state)
      randomnumbers.append(state)

   randomnumbers = np.array(randomnumbers)

   if norm == True:
      randomnumbers = np.array(randomnumbers)/(2**64)
      
   return randomnumbers.tolist()
   #Combine LCG, 64-bit-xor-shift

RNG_list = RNG(5,1000)
RNG_list2 = RNG(5,10**6)

n_RNG_list = np.array(RNG_list[:-1])
np1_RNG_list = np.array(RNG_list[1:])

fig, axs = plt.subplots(1, 2, sharey=False, tight_layout=True)

axs[0].scatter(n_RNG_list, np1_RNG_list, marker="o", color=(1,0,0), facecolors='none')
axs[1].hist(RNG_list2, bins = 20, range = (0,1))

xlabel = ['Combined RNG n', 'Random number generated by combined RNG']
ylabel = ['Combined RNG n+1', 'Counts']

i=0
for ax in axs:
   ax.set(xlabel=xlabel[i], ylabel=ylabel[i])#, xticks = ticks[i])
   i+=1

plt.show()

"""
random_XOR = random_list(2,1000)
random_LCG = random_list(2,1000,method=LCG)

random_XOR2 = random_list(2,10**6)
random_LCG2 = random_list(2,10**6,method=LCG)

n_XOR = np.array(random_XOR[:-1])
np1_XOR = np.array(random_XOR[1:])

n_LCG = np.array(random_LCG[:-1])
np1_LCG = np.array(random_LCG[1:])

fig, axs = plt.subplots(2, 2, sharey=False, tight_layout=True)

axs[0,0].scatter(n_XOR, np1_XOR, marker="o", color=(1,0,0), facecolors='none')
axs[0,1].scatter(n_LCG, np1_LCG, marker="o", color=(0,1,0), facecolors='none')
axs[1,0].hist(random_XOR2, bins = 20, range = (0,1))
axs[1,1].hist(random_LCG2, bins = 20, range = (0,1))

#axs[0].text(0,4.2*10**9,'PCC: '+str(coefLCG))
#axs[1].text(0,4.2*10**9,'PCC: '+str(coefNUMPY))

xlabel = ['64-bit XOR-shift n', 'LCG n', '64-bit XOR-shift random number generated', 'LCG random number generated']
ylabel = ['64-bit XOR-shift n+1', 'LCG n+1', 'Counts', 'Counts']
#ticks = [range(-100,160,20), range(0,100,10)]
i=0
for ax in axs:
   for a in ax:
      a.set(xlabel=xlabel[i], ylabel=ylabel[i])#, xticks = ticks[i])
      i+=1

#axs[0].set_xlim([-1,5])
#axs[0].set_ylim([0,6])

plt.show()
#plt.savefig('Q2-x0=2-a='+str(a)+'-c='+str(c)+'-m='+str(m))


#plt.hist(random_XOR2, bins = 20, )
"""

