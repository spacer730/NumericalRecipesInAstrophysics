import numpy as np
import matplotlib.pyplot as plt

def factorial(k):
   h = 1
   while k>1:
      h = h*k
      k -= 1
   return h

def Poisson(labda, k):
   return (labda**k)*np.exp(-labda)/(factorial(k))

def LCG(x):
   a = 3202034522624059733
   c = 4354685564936845319
   m = 2**64
   return (a*x+c)%m

def XOR_shift(x):
   a1, a2, a3 = np.uint64(21), np.uint64(35), np.uint64(4)
   x = np.uint64(x)
   x = x ^ (x >> a1)
   x = x ^ (x << a2)
   x = x ^ (x >> a3)
   return x

def RNG(length, norm = True):
   global seed

   randomnumbers = []
   state = seed
   
   for i in range(length):
      state = LCG(state)
      randomnumbers.append(XOR_shift(state))

   randomnumbers = np.array(randomnumbers)

   if norm == True:
      randomnumbers = np.array(randomnumbers)/(2**64)

   seed = state
      
   return randomnumbers.tolist()

if __name__ == '__main__':
   seed = 2
   print("The seed is: " + str(seed))

   print(Poisson(1,0))
   print(Poisson(5,10))
   print(Poisson(3,20))
   print(Poisson(2.6,40))

   RNG_list = RNG(1000)
   RNG_list2 = RNG(10**6)

   n_RNG_list = np.array(RNG_list[:-1])
   np1_RNG_list = np.array(RNG_list[1:])

   fig, axs = plt.subplots(1, 2, sharey=False, tight_layout=True)

   axs[0].scatter(n_RNG_list, np1_RNG_list, marker="o", color=(1,0,0), facecolors='none')
   axs[1].hist(RNG_list2, bins = 20, range = (0,1))

   xlabel = ['Combined RNG n', 'Random number generated by combined RNG']
   ylabel = ['Combined RNG n+1', 'Counts']

   i=0
   for ax in axs:
      ax.set(xlabel=xlabel[i], ylabel=ylabel[i])
      i+=1

   plt.savefig('RNG-test-results')
   
   uniform = RNG(3)
   a = (uniform[0]*1.4)+1.1
   b = (uniform[1]*1.5)+0.5
   c = (uniform[2]*2.5)+1.5
   
   
