import numpy as np
import matplotlib.pyplot as plt

def factorial(k):
   h = 1
   while k>1:
      h = h*k
      k -= 1
   return h

def Poisson(labda, k):
   return (labda**k)*np.exp(-labda)/(factorial(k))

def LCG(x):
   a = 3202034522624059733
   c = 4354685564936845319
   m = 2**64
   return (a*x+c)%m

def XOR_shift(x):
   a1, a2, a3 = np.uint64(21), np.uint64(35), np.uint64(4)
   x = np.uint64(x)
   x = x ^ (x >> a1)
   x = x ^ (x << a2)
   x = x ^ (x >> a3)
   return x

def RNG(length, norm = True):
   global seed

   randomnumbers = []
   state = seed
   
   for i in range(length):
      state = LCG(state)
      randomnumbers.append(XOR_shift(state))

   randomnumbers = np.array(randomnumbers)

   if norm == True:
      randomnumbers = np.array(randomnumbers)/(2**64)

   seed = state
   if length == 1:
      return randomnumbers[0]
   else:
      return randomnumbers.tolist()

def densityprofileint(x):
   global a,b,c
   return ((x/b)**(a-3))*np.exp(-(x/b)**c)*x**2

def densityprofile(x):
   global a,b,c
   return ((x/b)**(a-3))*np.exp(-(x/b)**c)

def extmidpoint(func, edges, n):
   h = (edges[1]-edges[0])/n
   integration = 0

   for i in range(n):
       integration += func(edges[0]+(i+0.5)*h)
   integration = h*integration

   return integration

def extmidpointromberg(func, edges, n, N):
   s = [[] for i in range(N)]
   s[0].append(extmidpoint(func, edges, n))

   for i in range (1,N):
      n = 2*n
      s[0].append(extmidpoint(func, edges, n))
   
   for j in range(N-1):
      for i in range(N-(j+1)):
         s[j+1].append(s[j][i+1]+(s[j][i+1]-s[j][i])/(-1+4**(j+1)))

   return s[-1][0]

def nevi(x,i,j,numbers,p):
   return ((x-numbers[j])*p[i][j+1]-(x-numbers[j+1+i])*p[i][j])/(numbers[j+1+i]-numbers[j])

def Nevillesinterpolation(interpolationrange,numbers,values):
   interpolatedvalues = []

   for interpolatednumber in interpolatedrange:
      M=len(numbers)
      p=[[] for i in range(7)]
      p[0]=values
      while M>1:
         for j in range(M-1):
            order = 1+len(numbers)-M
            p[order].append(nevi(interpolatednumber,order-1,j,numbers,p))
         M-=1
      interpolatedvalues.append(p[len(numbers)-1][0])

   return interpolatedvalues


if __name__ == '__main__':
   seed = 2
   print("The seed is: " + str(seed))

   print(Poisson(1,0))
   print(Poisson(5,10))
   print(Poisson(3,20))
   print(Poisson(2.6,40))

   RNG_list = RNG(1000)
   RNG_list2 = RNG(10**6)

   n_RNG_list = np.array(RNG_list[:-1])
   np1_RNG_list = np.array(RNG_list[1:])

   fig, axs = plt.subplots(1, 2, sharey=False, tight_layout=True)

   axs[0].scatter(n_RNG_list, np1_RNG_list, marker="o", color=(1,0,0), facecolors='none')
   axs[1].hist(RNG_list2, bins = 20, range = (0,1))

   xlabel = ['Combined RNG n', 'Random number generated by combined RNG']
   ylabel = ['Combined RNG n+1', 'Counts']

   i=0
   for ax in axs:
      ax.set(xlabel=xlabel[i], ylabel=ylabel[i])
      i+=1

   fig.savefig('RNG-test-results')

   a = (RNG(1)*1.4)+1.1
   b = (RNG(1)*1.5)+0.5
   c = (RNG(1)*2.5)+1.5
   
   integration = extmidpointromberg(densityprofileint, [0,5], 10**2, 4)
   A = (1/(4*np.pi))*(1/integration)
   
   print("a,b,c,A = " + str(a) + "," + str(b) + "," + str(c) + "," + str(A))

   numbers = [10**-4, 10**-2, 10**-1, 1, 5]
   densityvalues = [densityprofile(10**-4), densityprofile(10**-2), densityprofile(10**-1), densityprofile(1), densityprofile(5)]

   interpolatedrange = np.logspace(-4,0.69897,100)
   Nevillesvalues = Nevillesinterpolation(interpolatedrange,numbers,densityvalues)
   
   fig2, axs2 = plt.subplots()

   axs2.loglog(interpolatedrange, Nevillesvalues)
   axs2.set(xlabel='log(x)', ylabel='Density profile')

   fig2.savefig('Log-Log plot')
